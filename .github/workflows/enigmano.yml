name: "üè¢ Windows 11 - RPD"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "‚å®Ô∏è Numero de instancia [1-10]:"
        required: true
        default: "1"
        type: string

jobs:
  deploy-enigmano:
    name: "Instancia - ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      NGROK_SHAHZAIB: ${{ secrets.NGROK_SHAHZAIB }}
      REPO: ${{ github.repository }}
      BRANCH: ${{ github.ref_name }}
      WORKFLOW_FILE: "enigmano.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}
      SCRIPT_URL: "https://raw.githubusercontent.com/Redveter/V3ASD34/refs/heads/main/EnigMano-instance.ps1"
      WALLPAPER_URL: "https://wallpapers.com/images/featured/hollow-knight-82dd1lgxpbzdrhqw.jpg"

    steps:
      - name: ü¶à Checkout repo
        uses: actions/checkout@v4

      - name: ü™ô Informacion del sistema
        run: |
          Write-Host "=== ENIGMANO RDP DEPLOYMENT ===" -ForegroundColor Green
          Write-Host "Instance Number: $env:INSTANCE_ID" -ForegroundColor Yellow
          Write-Host "Runner: $env:RUNNER_NAME" -ForegroundColor Yellow
          Write-Host "Workflow: $env:GITHUB_WORKFLOW" -ForegroundColor Yellow
          
          # System specs
          Write-Host "`n=== SYSTEM SPECIFICATIONS ===" -ForegroundColor Cyan
          Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory
          Get-WmiObject -Class Win32_Processor | Select-Object Name, NumberOfCores, NumberOfLogicalProcessors
        
      - name: ‚öôÔ∏è Parametros
        shell: powershell
        run: |
          # script
          $ProgressPreference = 'SilentlyContinue'
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host '==============================================='
          Write-Host ("Instancia EnigMano    : {0}" -f $env:INSTANCE_ID)
          Write-Host ("Instancia anterior    : {0}" -f $prevInstance)
          Write-Host ("Repositorio           : {0}" -f $env:REPO)
          Write-Host ("Workflow              : {0}" -f $env:WORKFLOW_FILE)
          Write-Host ("ID de despliegue      : {0}" -f $env:DEPLOYMENT_ID)
          Write-Host '==============================================='

      - name: üîê Validacion tokens
        shell: powershell
        run: |
          # script
          $ProgressPreference = 'SilentlyContinue'
          if (-not $env:NGROK_SHAHZAIB) {
            Write-Error 'Falta el token de Ngrok: NGROK_SHAHZAIB'
            exit 1
          }
          if (-not $env:SECRET_SHAHZAIB) {
            Write-Host 'ADVERTENCIA: SECRET_SHAHZAIB no esta configurado. Se omitira el encadenamiento de la siguiente instancia.'
          }
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          Write-Host 'Tokens verificados'

      

      - name: ü™ô Extensi√≥n - uBlock Origin (Brave)
        shell: powershell
        run: |
          Write-Host 'Politica uBlock Origin (Brave)'
          $ProgressPreference = 'SilentlyContinue'
          Write-Host 'Aplicando directiva para forzar la instalacion de uBlock Origin en Brave...'
          $policyPath = "HKLM:\Software\Policies\BraveSoftware\Brave\ExtensionInstallForcelist"
          New-Item -Path $policyPath -Force | Out-Null
          New-ItemProperty -Path $policyPath -Name "1" -Value "cjpalhdlnbpafiamejdnhcphjbkeiagm;https://clients2.google.com/service/update2/crx" -PropertyType String -Force | Out-Null
          Write-Host 'Directiva aplicada. uBlock Origin se instalara al iniciar Brave.'

      

      - name: ‚ö° Ejecucion del script
        shell: powershell
        run: |
          # script
          $ErrorActionPreference = 'Stop'
          Set-Location $env:GITHUB_WORKSPACE

          $candidatePaths = @(
            ".\Powershell\EnigMano-instance.ps1",
            ".\powershell\EnigMano-instance.ps1",
            ".\EnigMano-instance.ps1"
          )

          $scriptPath = $candidatePaths | Where-Object { Test-Path $_ } | Select-Object -First 1
          
          # Validar que el archivo detectado no contenga sintaxis YAML (evita error ${ { } })
          if ($scriptPath) {
            try {
              $rawSample = (Get-Content -Path $scriptPath -TotalCount 50 -ErrorAction Stop) -join [Environment]::NewLine
              if ($rawSample -like '*${{*' -or $rawSample -like 'name:*') {
                Write-Host "Archivo local parece YAML/Workflow. Se forzar√° descarga del script correcto..."
                $scriptPath = $null
              }
            } catch {
              $scriptPath = $null
            }
          }

          if (-not $scriptPath) {
            $downloadPath = Join-Path $env:RUNNER_TEMP "EnigMano-instance.ps1"

            $rawBase = "https://raw.githubusercontent.com/$env:REPO/$env:BRANCH"
            $scriptUrlCandidates = @()
            if ($env:SCRIPT_URL) { $scriptUrlCandidates += $env:SCRIPT_URL }
            $scriptUrlCandidates += @(
              "$rawBase/Powershell/EnigMano-instance.ps1",
              "$rawBase/powershell/EnigMano-instance.ps1",
              "$rawBase/EnigMano-instance.ps1"
            )

            $downloaded = $false
            foreach ($u in $scriptUrlCandidates) {
              Write-Host ("Intentando descargar: {0}" -f $u)
              try {
                Invoke-WebRequest -Uri $u -OutFile $downloadPath -UseBasicParsing -ErrorAction Stop
                $downloaded = $true
                break
              } catch {}
            }

            if (-not $downloaded) {
              Write-Host "Descarga directa fall√≥. Intentando v√≠a API de GitHub..."
              if ($env:SECRET_SHAHZAIB) {
                $headers = @{ Authorization = "Bearer $env:SECRET_SHAHZAIB"; 'User-Agent' = 'EnigMano-Runner'; Accept = 'application/vnd.github.v3.raw' }
                $apiUrls = @(
                  "https://api.github.com/repos/$env:REPO/contents/Powershell/EnigMano-instance.ps1?ref=$env:BRANCH",
                  "https://api.github.com/repos/$env:REPO/contents/powershell/EnigMano-instance.ps1?ref=$env:BRANCH",
                  "https://api.github.com/repos/$env:REPO/contents/EnigMano-instance.ps1?ref=$env:BRANCH"
                )
                foreach ($apiUrl in $apiUrls) {
                  try {
                    Invoke-WebRequest -Uri $apiUrl -Headers $headers -OutFile $downloadPath -UseBasicParsing -ErrorAction Stop
                    $downloaded = $true
                    break
                  } catch {}
                }
              } else {
                Write-Error "No se pudo descargar el script y no hay token para usar la API de GitHub."
                throw
              }
            }

            if (-not (Test-Path $downloadPath)) { Write-Error "Descarga del script fallida."; exit 1 }

            # Validaci√≥n final de contenido descargado
            try {
              $rawSample = (Get-Content -Path $downloadPath -TotalCount 50 -ErrorAction Stop) -join [Environment]::NewLine
              if ($rawSample -like '*${{*' -or $rawSample -like 'name:*') {
                Write-Error "El archivo descargado no es un script PowerShell v√°lido (parece YAML)."
                exit 1
              }
            } catch {}
            $scriptPath = $downloadPath
          }

          Write-Host ("Ejecutando script: {0}" -f $scriptPath)
          powershell.exe -ExecutionPolicy Bypass -File $scriptPath

      - name: üèÅ Finalizado
        if: always()
        shell: powershell
        run: |
          # script
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          Write-Host 'Developer by Nex'
