name: "üè¢ Windows 11 - RPD"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "‚å®Ô∏è Numero de instancia [1-10]:"
        required: true
        default: "1"
        type: string

jobs:
  deploy-enigmano:
    name: "Instancia - ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      NGROK_SHAHZAIB: ${{ secrets.NGROK_SHAHZAIB }}
      REPO: ${{ github.repository }}
      BRANCH: ${{ github.ref_name }}
      WORKFLOW_FILE: "enigmano.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}
      SCRIPT_URL: "https://raw.githubusercontent.com/Redveter/V3ASD34/refs/heads/main/EnigMano-instance.ps1"

    steps:
      - name: ü¶à Checkout repo
        uses: actions/checkout@v4

      - name: ü™ô Informacion del sistema
        run: |
          Write-Host "=== ENIGMANO RDP DEPLOYMENT ===" -ForegroundColor Green
          Write-Host "Instance Number: $env:INSTANCE_ID" -ForegroundColor Yellow
          Write-Host "Runner: $env:RUNNER_NAME" -ForegroundColor Yellow
          Write-Host "Workflow: $env:GITHUB_WORKFLOW" -ForegroundColor Yellow
          
          # System specs
          Write-Host "`n=== SYSTEM SPECIFICATIONS ===" -ForegroundColor Cyan
          Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory
          Get-WmiObject -Class Win32_Processor | Select-Object Name, NumberOfCores, NumberOfLogicalProcessors
        
      - name: ‚öôÔ∏è Parametros
        shell: powershell
        run: |
          # script
          $ProgressPreference = 'SilentlyContinue'
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host '==============================================='
          Write-Host ("Instancia EnigMano    : {0}" -f $env:INSTANCE_ID)
          Write-Host ("Instancia anterior    : {0}" -f $prevInstance)
          Write-Host ("Repositorio           : {0}" -f $env:REPO)
          Write-Host ("Workflow              : {0}" -f $env:WORKFLOW_FILE)
          Write-Host ("ID de despliegue      : {0}" -f $env:DEPLOYMENT_ID)
          Write-Host '==============================================='

      - name: üîê Validacion tokens
        shell: powershell
        run: |
          # script
          $ProgressPreference = 'SilentlyContinue'
          if (-not $env:NGROK_SHAHZAIB) {
            Write-Error 'Falta el token de Ngrok: NGROK_SHAHZAIB'
            exit 1
          }
          if (-not $env:SECRET_SHAHZAIB) {
            Write-Host 'ADVERTENCIA: SECRET_SHAHZAIB no esta configurado. Se omitira el encadenamiento de la siguiente instancia.'
          }
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          Write-Host 'Tokens verificados'

      - name: üì¶ Instalacion de software
        shell: powershell
        run: |
          # script
          Write-Host 'Instalacion de software'
          $ProgressPreference = 'SilentlyContinue'
          Write-Host 'Preparando Chocolatey...'
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')) *> $null
          choco --version *> $null
          Write-Host 'Chocolatey listo'

          function Install-App {
            param([string]$Id,[string]$Nombre)
            choco install $Id -y --no-progress *> $null
            $code = $LASTEXITCODE
            if ($code -in 0,3010) { Write-Host ("OK: {0} instalado" -f $Nombre) }
            elseif ($code -eq 0)  { Write-Host ("OK: {0} instalado" -f $Nombre) }
            else { Write-Host ("AVISO: {0} pudo no instalarse correctamente (codigo {1})" -f $Nombre,$code) }
          }

          Install-App -Id 'brave' -Nombre 'Brave'
          Install-App -Id 'winrar' -Nombre 'WinRAR'
          Install-App -Id 'notepadplusplus' -Nombre 'Notepad++'

      - name: ü™ô Extensi√≥n - uBlock Origin (Brave)
        shell: powershell
        run: |
          Write-Host 'Politica uBlock Origin (Brave)'
          $ProgressPreference = 'SilentlyContinue'
          Write-Host 'Aplicando directiva para forzar la instalacion de uBlock Origin en Brave...'
          $policyPath = "HKLM:\Software\Policies\BraveSoftware\Brave\ExtensionInstallForcelist"
          New-Item -Path $policyPath -Force | Out-Null
          New-ItemProperty -Path $policyPath -Name "1" -Value "cjpalhdlnbpafiamejdnhcphjbkeiagm;https://clients2.google.com/service/update2/crx" -PropertyType String -Force | Out-Null
          Write-Host 'Directiva aplicada. uBlock Origin se instalara al iniciar Brave.'

      - name: üñºÔ∏è Fondo de pantalla
        shell: powershell
        run: |
          # script
          $ErrorActionPreference = 'Stop'
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072

          $themeDir = "$env:APPDATA\Microsoft\Windows\Themes"
          New-Item -Path $themeDir -ItemType Directory -Force | Out-Null

          $imgUrl  = "https://rare-gallery.com/mocahbig/1377126-hollow-knight-silksong-game-4k-pc-wallpaper.jpg"
          $imgPath = Join-Path $themeDir "wallpaper.jpg"
          try {
            $headers = @{ 
              'User-Agent' = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0 Safari/537.36'
              'Referer'    = 'https://rare-gallery.com/'
            }
            Invoke-WebRequest -Uri $imgUrl -Headers $headers -OutFile $imgPath -UseBasicParsing -MaximumRedirection 5 -ErrorAction Stop
          } catch {
            Write-Host ("Invoke-WebRequest fallo: {0}. Intentando curl..." -f $_.Exception.Message)
            & curl.exe -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0 Safari/537.36" -e "https://rare-gallery.com/" $imgUrl -o $imgPath
            if (-not (Test-Path $imgPath) -or (Get-Item $imgPath).Length -lt 10240) { Write-Error "Descarga del wallpaper fallida (curl)."; exit 1 }
          }

          # Define P/Invoke without inline using; fully-qualify the attribute
          Add-Type -Namespace Win32 -Name Native -MemberDefinition '[System.Runtime.InteropServices.DllImport("user32.dll", SetLastError=true)] public static extern bool SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);'
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name Wallpaper -Value $imgPath
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name WallpaperStyle -Value 6
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name TileWallpaper -Value 0
          [Win32.Native]::SystemParametersInfo(0x0014, 0, $imgPath, 0x0001 -bor 0x0002) | Out-Null

      - name: ‚ö° Ejecucion del script
        shell: powershell
        run: |
          # script
          $ErrorActionPreference = 'Stop'
          Set-Location $env:GITHUB_WORKSPACE

          $candidatePaths = @(
            ".\powershell\EnigMano-instance.ps1",
            ".\EnigMano-instance.ps1"
          )

          $scriptPath = $candidatePaths | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $scriptPath) {
            if (-not $env:SCRIPT_URL) {
              Write-Error "No se encontr√≥ 'EnigMano-instance.ps1' local y SCRIPT_URL no est√° definido."
              Get-ChildItem -Path . -Recurse -Filter 'EnigMano-instance.ps1' | Select-Object FullName
              exit 1
            }

            $downloadPath = Join-Path $env:RUNNER_TEMP "EnigMano-instance.ps1"
            Write-Host ("Descargando script desde {0} a {1}" -f $env:SCRIPT_URL, $downloadPath)
            try {
              Invoke-WebRequest -Uri $env:SCRIPT_URL -OutFile $downloadPath -UseBasicParsing -ErrorAction Stop
            } catch {
              Write-Host "Descarga directa fall√≥. Intentando v√≠a API de GitHub..."
              if ($env:SECRET_SHAHZAIB) {
                $apiUrl = "https://api.github.com/repos/$env:REPO/contents/EnigMano-instance.ps1?ref=$env:BRANCH"
                $headers = @{ Authorization = "Bearer $env:SECRET_SHAHZAIB"; 'User-Agent' = 'EnigMano-Runner'; Accept = 'application/vnd.github.v3.raw' }
                Invoke-WebRequest -Uri $apiUrl -Headers $headers -OutFile $downloadPath -UseBasicParsing -ErrorAction Stop
              } else {
                Write-Error "No se pudo descargar el script y no hay token para usar la API de GitHub."
                throw
              }
            }
            if (-not (Test-Path $downloadPath)) { Write-Error "Descarga del script fallida."; exit 1 }
            $scriptPath = $downloadPath
          }

          Write-Host ("Ejecutando script: {0}" -f $scriptPath)
          powershell.exe -ExecutionPolicy Bypass -File $scriptPath

      - name: üèÅ Finalizado
        if: always()
        shell: powershell
        run: |
          # script
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          Write-Host 'Developer by Nex'
