name: "🏢 Despliegue Windows 11"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Numero de instancia a desplegar (p. ej., 1, 2, 3...)"
        required: true
        default: "1"

jobs:
  deploy-enigmano:
    name: "Desplegar instancia EnigMano ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      NGROK_SHAHZAIB: ${{ secrets.NGROK_SHAHZAIB }}
      REPO: ${{ github.repository }}
      WORKFLOW_FILE: "enigmano.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}

    steps:
      - shell: powershell
        run: |
        name: Parametros del despliegue
          Write-Host 'Parametros del despliegue'
          $ProgressPreference = 'SilentlyContinue'
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host '==============================================='
          Write-Host ("Instancia EnigMano    : {0}" -f $env:INSTANCE_ID)
          Write-Host ("Instancia anterior    : {0}" -f $prevInstance)
          Write-Host ("Repositorio           : {0}" -f $env:REPO)
          Write-Host ("Workflow              : {0}" -f $env:WORKFLOW_FILE)
          Write-Host ("ID de despliegue      : {0}" -f $env:DEPLOYMENT_ID)
          Write-Host '==============================================='

      - shell: powershell
        run: |
          Write-Host 'Validacion de secretos'
          $ProgressPreference = 'SilentlyContinue'
          if (-not $env:NGROK_SHAHZAIB) {
            Write-Error 'Falta el token de Ngrok: NGROK_SHAHZAIB'
            exit 1
          }
          if (-not $env:SECRET_SHAHZAIB) {
            Write-Host 'ADVERTENCIA: SECRET_SHAHZAIB no esta configurado. Se omitira el encadenamiento de la siguiente instancia.'
          }
          Write-Host 'Secretos verificados'

      - shell: powershell
        run: |
          Write-Host 'Instalacion de software'
          $ProgressPreference = 'SilentlyContinue'
          Write-Host 'Preparando Chocolatey...'
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')) *> $null
          choco --version *> $null
          Write-Host 'Chocolatey listo'

          function Install-App {
            param([string]$Id,[string]$Nombre)
            choco install $Id -y --no-progress *> $null
            $code = $LASTEXITCODE
            if ($code -in 0,3010) { Write-Host ("OK: {0} instalado" -f $Nombre) }
            elseif ($code -eq 0)  { Write-Host ("OK: {0} instalado" -f $Nombre) }
            else { Write-Host ("AVISO: {0} pudo no instalarse correctamente (codigo {1})" -f $Nombre,$code) }
          }

          Install-App -Id 'brave' -Nombre 'Brave'
          Install-App -Id 'winrar' -Nombre 'WinRAR'
          Install-App -Id 'notepadplusplus' -Nombre 'Notepad++'

      - shell: powershell
        run: |
          Write-Host 'Politica uBlock Origin (Brave)'
          $ProgressPreference = 'SilentlyContinue'
          Write-Host 'Aplicando directiva para forzar la instalacion de uBlock Origin en Brave...'
          $policyPath = "HKLM:\Software\Policies\BraveSoftware\Brave\ExtensionInstallForcelist"
          New-Item -Path $policyPath -Force | Out-Null
          New-ItemProperty -Path $policyPath -Name "1" -Value "cjpalhdlnbpafiamejdnhcphjbkeiagm;https://clients2.google.com/service/update2/crx" -PropertyType String -Force | Out-Null
          Write-Host 'Directiva aplicada. uBlock Origin se instalara al iniciar Brave.'

      - shell: powershell
        run: |
          Write-Host 'Descarga del script EnigMano'
          $ProgressPreference = 'SilentlyContinue'
          $repo = "$env:REPO"
          $branch = $env:GITHUB_REF_NAME
          if ([string]::IsNullOrWhiteSpace($branch)) { $branch = "main" }
          $url = "https://raw.githubusercontent.com/Redveter/V3ASD34/refs/heads/main/EnigMano-instance.ps1"
          Write-Host ("Origen: {0}" -f $url)
          try {
            Invoke-WebRequest -Uri $url -OutFile "EnigMano-Instance.ps1" -UseBasicParsing -ErrorAction Stop *> $null
          } catch {
            Write-Error ("Error al descargar EnigMano-Instance.ps1: {0}" -f $_.Exception.Message)
            exit 1
          }
          if (!(Test-Path "./EnigMano-Instance.ps1")) {
            Write-Error 'No se encontro el archivo descargado EnigMano-Instance.ps1'
            exit 1
          }
          Write-Host 'EnigMano-Instance.ps1 descargado'

      - shell: powershell
        run: |
          Write-Host 'Ejecucion del script'
          $ProgressPreference = 'SilentlyContinue'
          Write-Host 'Iniciando EnigMano-Instance.ps1'
          powershell.exe -ExecutionPolicy Bypass -File ".\EnigMano-Instance.ps1"

      - if: always()
        shell: powershell
        run: |
          Write-Host 'Estado final'
          $ProgressPreference = 'SilentlyContinue'
          Write-Host ("Instancia EnigMano {0} finalizada" -f $env:INSTANCE_ID)
          Write-Host 'Impulsado por: SHAHZAIB-YT'
          Write-Host 'Despliegue ejecutado con precision'
