 name: "⚡ Despliegue de Instancia EnigMano"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Número de instancia a desplegar (p. ej., 1, 2, 3...)"
        required: true
        default: "1"
        type: string

jobs:
  deploy-enigmano:
    name: "🚀 Desplegar instancia EnigMano #${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      NGROK_SHAHZAIB: ${{ secrets.NGROK_SHAHZAIB }}
      REPO: ${{ github.repository }}
      WORKFLOW_FILE: "enigmano.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}

    steps:
      - name: "📌 Parámetros del despliegue — Instancia #${{ env.INSTANCE_ID }}"
        shell: pwsh
        run: |
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host "════════════════════════════════════════════════"
          Write-Host "🔹 Instancia EnigMano    : $env:INSTANCE_ID"
          Write-Host "🔢 Instancia anterior    : $prevInstance"
          Write-Host "📦 Repositorio de GitHub : $env:REPO"
          Write-Host "🔁 Workflow de despliegue: $env:WORKFLOW_FILE"
          Write-Host "🆔 ID de despliegue      : $env:DEPLOYMENT_ID"
          Write-Host "════════════════════════════════════════════════"

      - name: 🔐 Validar secretos (GitHub y Ngrok)
        shell: pwsh
        run: |
          if (-not $env:SECRET_SHAHZAIB) {
            Write-Error "❌ Falta el secreto de GitHub: SECRET_SHAHZAIB"
            exit 1
          }
          if (-not $env:NGROK_SHAHZAIB) {
            Write-Error "❌ Falta el token de autenticación de Ngrok: NGROK_SHAHZAIB"
            exit 1
          }
          Write-Host "✅ Todos los secretos requeridos fueron validados correctamente"

      - name: 🆔 Generar identidad y credenciales seguras
        shell: pwsh
        run: |
          function New-SecurePassword {
            $upper   = [char[]](65..90)
            $lower   = [char[]](97..122)
            $number  = [char[]](48..57)
            $specialAll = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
            $excluded = @('"', "'", '`', '&', '|', '<', '>', '$', ' ') # excluir comillas, backtick, pipe, redirecciones, espacio, dólar
            $special = $specialAll | Where-Object { $excluded -notcontains $_ }
            $raw = @()
            $raw += $upper   | Get-Random -Count 4
            $raw += $lower   | Get-Random -Count 4
            $raw += $number  | Get-Random -Count 4
            $raw += $special | Get-Random -Count 4
            -join ($raw | Sort-Object { Get-Random })
          }

          $suffix = -join ((48..57 + 97..122) | Get-Random -Count 4 | ForEach-Object {[char]$_})
          $instanceLabel = "ENIG-$($env:INSTANCE_ID)-$suffix"
          $username = "rdp-$suffix"
          $password = New-SecurePassword

          Write-Host "::add-mask::$password"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_USER=$username"
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASS=$password"
          Add-Content -Path $env:GITHUB_ENV -Value "INSTANCE_LABEL=$instanceLabel"

          Write-Host "════════════════════════════════════════════════"
          Write-Host "🆔 Identidad generada"
          Write-Host " • Usuario      : $username"
          Write-Host " • Etiqueta     : $instanceLabel"
          Write-Host " • Contraseña   : (oculta)"
          Write-Host "════════════════════════════════════════════════"

      - name: 📦 Instalar software con Chocolatey (Brave, WinRAR, Notepad++)
        shell: pwsh
        run: |
          Write-Host "📥 Instalando Chocolatey y aplicaciones..." -ForegroundColor Green
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

          choco --version

          # Instalar aplicaciones (idempotente)
          choco install brave -y --no-progress || Write-Host "ℹ️ Instalación de Brave omitida (posiblemente ya instalado)."
          choco install winrar -y --no-progress || Write-Host "ℹ️ Instalación de WinRAR omitida (posiblemente ya instalado)."
          choco install notepadplusplus -y --no-progress || Write-Host "ℹ️ Instalación de Notepad++ omitida (posiblemente ya instalado)."

      - name: 🧩 Forzar instalación de uBlock Origin en Brave
        shell: pwsh
        run: |
          Write-Host "🛡️ Configurando directiva para forzar la instalación de uBlock Origin en Brave..." -ForegroundColor Green
          $policyPath = "HKLM:\Software\Policies\BraveSoftware\Brave\ExtensionInstallForcelist"
          New-Item -Path $policyPath -Force | Out-Null
          New-ItemProperty -Path $policyPath -Name "1" -Value "cjpalhdlnbpafiamejdnhcphjbkeiagm;https://clients2.google.com/service/update2/crx" -PropertyType String -Force | Out-Null
          Write-Host "✅ Directiva aplicada. uBlock Origin se instalará cuando se inicie Brave." -ForegroundColor Green

      - name: 📥 Descargar EnigMano-instance.ps1 (del repo actual)
        shell: pwsh
        run: |
          $repo = "$env:REPO"
          $branch = $env:GITHUB_REF_NAME
          if ([string]::IsNullOrWhiteSpace($branch)) { $branch = "main" }
          $url = "https://raw.githubusercontent.com/$repo/$branch/powershell/EnigMano-instance.ps1"
          Write-Host "🌐 Descargando EnigMano-instance.ps1 desde:"
          Write-Host "   $url"
          Invoke-WebRequest -Uri $url -OutFile "EnigMano-instance.ps1" -UseBasicParsing
          if (!(Test-Path "./EnigMano-instance.ps1")) {
            Write-Error "❌ No se pudo descargar EnigMano-instance.ps1 desde el repositorio actual ($repo)."
            exit 1
          }
          Write-Host "✅ EnigMano-instance.ps1 descargado correctamente"

      - name: 🧭 Ejecutar script de instancia EnigMano (con parámetros)
        shell: pwsh
        run: |
          Write-Host "🚦 Iniciando EnigMano-instance.ps1 con credenciales generadas"
          powershell.exe -ExecutionPolicy Bypass -File ".\EnigMano-instance.ps1" -Username "$env:RDP_USER" -Password "$env:RDP_PASS" -InstanceLabel "$env:INSTANCE_LABEL"

      - name: ✅ Estado final
        if: always()
        shell: pwsh
        run: |
          Write-Host "════════════════════════════════════════════════"
          Write-Host "🎉 Despliegue completado"
          Write-Host " • Instancia    : $env:INSTANCE_ID"
          Write-Host " • Usuario RDP  : $env:RDP_USER"
          Write-Host " • Etiqueta     : $env:INSTANCE_LABEL"
          Write-Host "🔋 Impulsado por: SHAHZAIB-YT"
          Write-Host "🏁 Despliegue de EnigMano ejecutado con precisión."
          Write-Host "════════════════════════════════════════════════"
