name: "‚ö° Despliegue de EnigMano Windows 11"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "N√∫mero de instancia a desplegar (p. ej., 1, 2, 3...)"
        required: true
        default: "1"

jobs:
  deploy-enigmano:
    name: "üöÄ Desplegar instancia EnigMano ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      NGROK_SHAHZAIB: ${{ secrets.NGROK_SHAHZAIB }}
      REPO: ${{ github.repository }}
      WORKFLOW_FILE: "enigmano.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}

    steps:
      - name: Par√°metros del despliegue
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host "::group::Par√°metros del despliegue"
          Write-Host "==============================================="
          Write-Host "Instancia EnigMano      : $env:INSTANCE_ID"
          Write-Host "Instancia anterior      : $prevInstance"
          Write-Host "Repositorio de GitHub   : $env:REPO"
          Write-Host "Workflow de despliegue  : $env:WORKFLOW_FILE"
          Write-Host "ID de despliegue        : $env:DEPLOYMENT_ID"
          Write-Host "==============================================="
          Write-Host "::endgroup::"

      - name: Validar secretos
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Write-Host "::group::Validaci√≥n de secretos"
          if (-not $env:NGROK_SHAHZAIB) {
            Write-Error "[ERROR] Falta el token de Ngrok: NGROK_SHAHZAIB"
            exit 1
          }
          if (-not $env:SECRET_SHAHZAIB) {
            Write-Host "[WARN] SECRET_SHAHZAIB no est√° configurado. Se omitir√° el encadenamiento de la siguiente instancia."
          }
          Write-Host "[OK] Validaci√≥n de secretos completada"
          Write-Host "::endgroup::"

      - name: Instalar software con Chocolatey (Brave, WinRAR, Notepad++)
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Write-Host "::group::Instalaci√≥n de software"
          Write-Host "[INFO] Preparando Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco --version | Out-Host

          function Install-App {
            param([string]$Id,[string]$Nombre)
            choco install $Id -y --no-progress
            if ($LASTEXITCODE -eq 0) {
              Write-Host "[OK] $Nombre instalado"
            } else {
              Write-Host "[SKIP] $Nombre ya estaba instalado u omitido (c√≥digo $LASTEXITCODE)"
            }
          }

          Install-App -Id 'brave' -Nombre 'Brave'
          Install-App -Id 'winrar' -Nombre 'WinRAR'
          Install-App -Id 'notepadplusplus' -Nombre 'Notepad++'
          Write-Host "::endgroup::"

      - name: Forzar instalaci√≥n de uBlock Origin en Brave
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Write-Host "::group::Pol√≠tica para uBlock Origin (Brave)"
          Write-Host "[INFO] Configurando directiva para forzar la instalaci√≥n de uBlock Origin en Brave..."
          $policyPath = "HKLM:\Software\Policies\BraveSoftware\Brave\ExtensionInstallForcelist"
          New-Item -Path $policyPath -Force | Out-Null
          New-ItemProperty -Path $policyPath -Name "1" -Value "cjpalhdlnbpafiamejdnhcphjbkeiagm;https://clients2.google.com/service/update2/crx" -PropertyType String -Force | Out-Null
          Write-Host "[OK] Directiva aplicada. uBlock Origin se instalar√° al iniciar Brave."
          Write-Host "::endgroup::"

      - name: Descargar EnigMano-Instance.ps1
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Write-Host "::group::Descarga del script EnigMano"
          $repo = "$env:REPO"
          $branch = $env:GITHUB_REF_NAME
          if ([string]::IsNullOrWhiteSpace($branch)) { $branch = "main" }
          $url = "https://raw.githubusercontent.com/$repo/$branch/powershell/EnigMano-instance.ps1"
          Write-Host "[INFO] Origen: $url"
          try {
            Invoke-WebRequest -Uri $url -OutFile "EnigMano-Instance.ps1" -UseBasicParsing -ErrorAction Stop
          } catch {
            Write-Error "[ERROR] Error al descargar EnigMano-Instance.ps1: $($_.Exception.Message)"
            exit 1
          }
          if (!(Test-Path "./EnigMano-Instance.ps1")) {
            Write-Error "[ERROR] No se encontr√≥ el archivo descargado EnigMano-Instance.ps1"
            exit 1
          }
          Write-Host "[OK] EnigMano-Instance.ps1 descargado"
          Write-Host "::endgroup::"

      - name: Ejecutar script de instancia EnigMano
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Write-Host "::group::Ejecuci√≥n del script"
          Write-Host "[INFO] Iniciando EnigMano-Instance.ps1"
          powershell.exe -ExecutionPolicy Bypass -File ".\EnigMano-Instance.ps1"
          Write-Host "::endgroup::"

      - name: Estado final
        if: always()
        shell: pwsh
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Write-Host "::group::Estado final"
          Write-Host "[OK] Instancia EnigMano $env:INSTANCE_ID finalizada"
          Write-Host "[INFO] Impulsado por: SHAHZAIB-YT"
          Write-Host "[OK] Despliegue ejecutado con precisi√≥n"
          Write-Host "::endgroup::"
